package views;

import java.io.IOException;
import java.io.OutputStream;

/**
 * @file View.java
 * @brief Base interface for all view components in the MVC architecture
 * @author Advanced Programming Course
 * @date 2025
 * @version 1.0
 * 
 * This interface defines the contract for all view components in the Agent Graph Manager.
 * Views are responsible for rendering data into specific output formats (HTML, JSON, etc.)
 * and handling presentation logic. This separation allows for flexible presentation
 * of the same data in different formats.
 */
public interface View {
    
    /**
     * @brief Renders the view content to the output stream
     * @param data The data object to render (can be various types depending on the view)
     * @param output The OutputStream to write the rendered content to
     * @throws IOException if there's an error writing to the output stream
     * 
     * This method takes a data object and renders it in the format appropriate
     * for this view implementation. The data type and rendering format depend
     * on the specific view implementation.
     */
    void render(Object data, OutputStream output) throws IOException;
    
    /**
     * @brief Returns the MIME content type for this view's output format
     * @return A string representing the MIME content type (e.g., "text/html", "application/json")
     * 
     * This method provides the appropriate Content-Type header value for HTTP responses
     * generated by this view. This ensures that browsers and clients can properly
     * interpret the response content.
     */
    String getContentType();
}
